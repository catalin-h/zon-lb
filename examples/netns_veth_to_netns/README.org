* Test zon-lb between two custom network namespace via veth pairs

** Zon-lb features:

- XDP redirect on veth
- Connection tracking
- FIB lookup
- ARP caching
- full NAT (src/dst L2/L3 addresses change)

** Debugging ignored TCP SYN packet redirected to veth but received by pair veth L2

Notes:

- This problem prevents the 3-way TCP handshake as the SYN packet is ignored and no ACK+SYN
packet is replyed back.
- The L4 UDP communication is also affected. For IPv4 the UDP the inet csum is optional so
the packet drop happens during L4 handling.
- This isn't a network route problem as the ICMP reply works and the source IP is reachable
from the netns. This also means that the packet reaches L3 and the IP inet check sum is computed correctly.
- The =ip -s a= command show that the veth pair received w/o errors the SYN packet but also
shows that the endpoint doesn't respond back.
- The veth pair from network namespace had the required xdp program to enable the link with
the action XDP_PASS. Any other actions would drop the packet.

*** Using the ethtool

The =ethtool -S veth<id>= will show the xdp statistics and they show that there are no L2
xmit or rx issues or regarding the received xdp frames.

#+begin_src
# sudo ethtool -S veth2
NIC statistics:
     peer_ifindex: 2
     rx_queue_0_xdp_packets: 450
     rx_queue_0_xdp_bytes: 28292
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 187
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 720
     tx_queue_0_xdp_xmit_errors: 0
     
# ethtool -S veth3
NIC statistics:
     peer_ifindex: 17
     rx_queue_0_xdp_packets: 1596
     rx_queue_0_xdp_bytes: 132827
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 0
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 0
     tx_queue_0_xdp_xmit_errors: 0
#+end_src

*** Using bpftrace tcpdrop-bpfcc

The available tracepoints (kfree_skb, consume_skb) doesn't seem to catch TCP packets.
ICMP packets seem to be freed by consume_skb.

*** Using bpftrace custom script

**** Step 1: veth driver trace

Find the functions called:

#+begin_src
# bpftrace -e 'kprobe:veth_* { @cnt[probe]=count(); }'
Attaching 45 probes...
@cnt[kprobe:veth_xmit]: 3
@cnt[kprobe:veth_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_skb]: 3
@cnt[kprobe:veth_xdp_get]: 3
@cnt[kprobe:veth_xdp_rcv_bulk_skb.constprop.0]: 3
@cnt[kprobe:veth_ndo_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_one]: 3
@cnt[kprobe:veth_xdp_rcv.constprop.0]: 6
@cnt[kprobe:veth_poll]: 8
@cnt[kprobe:veth_get_iflink]: 195
@cnt[kprobe:veth_get_link_net]: 195
@cnt[kprobe:veth_get_stats64]: 403
@cnt[kprobe:veth_stats_rx]: 744
#+end_src

Attach probe to receive functions and indentify which one is used to handle the redirect

#+begin_src

#+end_src


** References

