* Test zon-lb between two custom network namespace via veth pairs

** Zon-lb features:

- XDP redirect on veth
- Connection tracking
- FIB lookup
- ARP caching
- full NAT (src/dst L2/L3 addresses change)

** Debugging ignored TCP SYN packet redirected to veth but received by pair veth L2

Notes:

- This problem prevents the 3-way TCP handshake as the SYN packet is ignored and no ACK+SYN
packet is replyed back.
- The L4 UDP communication is also affected. For IPv4 the UDP the inet csum is optional so
the packet drop happens during L4 handling.
- This isn't a network route problem as the ICMP reply works and the source IP is reachable
from the netns. This also means that the packet reaches L3 and the IP inet check sum is computed correctly.
- The =ip -s a= command show that the veth pair received w/o errors the SYN packet but also
shows that the endpoint doesn't respond back.
- The veth pair from network namespace had the required xdp program to enable the link with
the action XDP_PASS. Any other actions would drop the packet.

*** Using the ethtool

The =ethtool -S veth<id>= will show the xdp statistics and they show that there are no L2
xmit or rx issues or regarding the received xdp frames.

#+begin_src
# sudo ethtool -S veth2
NIC statistics:
     peer_ifindex: 2
     rx_queue_0_xdp_packets: 450
     rx_queue_0_xdp_bytes: 28292
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 187
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 720
     tx_queue_0_xdp_xmit_errors: 0
     
# ethtool -S veth3
NIC statistics:
     peer_ifindex: 17
     rx_queue_0_xdp_packets: 1596
     rx_queue_0_xdp_bytes: 132827
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 0
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 0
     tx_queue_0_xdp_xmit_errors: 0
#+end_src

*** Using bpftrace tcpdrop-bpfcc

The available tracepoints (kfree_skb, consume_skb) doesn't seem to catch TCP packets.
ICMP packets seem to be freed by consume_skb.

*** Using bpftrace custom script

**** Find the veth driver functions called during the redirect

#+begin_src
# bpftrace -e 'kprobe:veth_* { @cnt[probe]=count(); }'
Attaching 45 probes...
@cnt[kprobe:veth_xmit]: 3
@cnt[kprobe:veth_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_skb]: 3
@cnt[kprobe:veth_xdp_get]: 3
@cnt[kprobe:veth_xdp_rcv_bulk_skb.constprop.0]: 3
@cnt[kprobe:veth_ndo_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_one]: 3
@cnt[kprobe:veth_xdp_rcv.constprop.0]: 6
@cnt[kprobe:veth_poll]: 8
@cnt[kprobe:veth_get_iflink]: 195
@cnt[kprobe:veth_get_link_net]: 195
@cnt[kprobe:veth_get_stats64]: 403
@cnt[kprobe:veth_stats_rx]: 744
#+end_src

**** Attach probez to receive functions and indentify which one is used to handle the redirect

#+begin_src
// todo
#+end_src

Note that this packet is passed to network stack as the =napi_complete_done= is called.

**** Since the icmp works and tcp does not attach probe to =kprobe_skb_reason=

#+begin_src
22:02:59 0 swapper/3 veth3 kprobe:kfree_skb_reason  reason: 4 ..

        kfree_skb_reason+1
        tcp_v4_rcv+129
        ip_protocol_deliver_rcu+50
        ip_local_deliver_finish+114
        ip_sublist_rcv_finish+126
        ip_sublist_rcv+402
        ip_list_rcv+313
        __netif_receive_skb_list_core+670
        netif_receive_skb_list_internal+461
        napi_complete_done+109
        veth_poll+218
        __napi_poll+43
        net_rx_action+670
        __softirqentry_text_start+198
        __irq_exit_rcu+170
        sysvec_apic_timer_interrupt+110
        asm_sysvec_apic_timer_interrupt+22
        cpuidle_enter_state+222
        cpuidle_enter+41
        do_idle+514
        cpu_startup_entry+38
        start_secondary+298
        secondary_startup_64_no_verify+229
#+end_src

The reason id =4= means the tcp checksum is wrong:

#+begin_src
/** @SKB_DROP_REASON_TCP_CSUM: TCP checksum error */
	SKB_DROP_REASON_TCP_CSUM,
#+end_src

**** The full trace from =xmit= to =kfree_skb_reason=

#+begin_src
TIME     PID      COMMAND      VETH  PROBE                                    SKB_ADDR               SOURCE            DEST          DETAILS
17:55:40 3482215  telnet       veth1 kprobe:veth_xmit                         skb:0xffff940bcd4846e8 10.0.0.2:46846 -> 10.0.0.1:23    SYN_SENT
17:55:40 3482215  telnet       veth0 kprobe:veth_poll
17:55:40 3482215  telnet       veth0 kprobe:veth_xdp_rcv_skb                  skb:0xffff940bcd4846e8 10.0.0.2:46846 -> 10.0.0.1:23    SYN_SENT
17:55:40 3482215  telnet       veth2 kprobe:veth_xdp_xmit                     frm:0xffff940bede5a100, n=1, peer=veth3
17:55:40 3482215  telnet       veth0 kprobe:napi_complete_done
17:55:40 3482215  telnet       veth3 kprobe:veth_poll
17:55:40 3482215  telnet       veth3 kprobe:veth_xdp_rcv_one                  frm:0xffff940bede5a100
17:55:40 3482215  telnet       veth3 kprobe:__xdp_build_skb_from_frame        frm:0xffff940bede5a100 -> skb:0xffff940c92429500
17:55:40 3482215  telnet       veth3 kretprobe:__xdp_build_skb_from_frame     skb:0xffff940c92429500 10.2.0.1 -> 10.2.0.2 ethertype: 0x800, next: 6
17:55:40 3482215  telnet       veth3 tracepoint:net:napi_gro_receive_entry    skb:0xffff940c92429500 10.2.0.1 -> 10.2.0.2 ethertype: 0x800, next: 6
17:55:40 3482215  telnet       veth3 kprobe:napi_complete_done
17:55:40 3482215  telnet       veth3 kprobe:ip_protocol_deliver_rcu           skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223   protocol: 6
17:55:40 3482215  telnet       veth3 kprobe:tcp_v4_rcv                        skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223
17:55:40 3482215  telnet       veth3 tracepoint:tcp:tcp_bad_csum              skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223
17:55:40 3482215  telnet       veth3 kprobe:kfree_skb_reason                  skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223   drop_reason: 4
#+end_src

** References

