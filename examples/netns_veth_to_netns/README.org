#+TITLE: Test zon-lb between two custom network namespace via veth pairs

#+begin_src
┌───────────────────┐              ┌─────────────────────┐              ┌────────────────────┐
│zone2 netns        │              │   default netns     │              │         zone0 netns│
│  server           │              │                     │              │            client  │
│                 ┌─┴──────────────┴─┐                 ┌─┴──────────────┴─┐                  │
│            veth3│<--xdp_redirect---│veth2       veth0│<-----------------│veth1             │
│                 │----------------->│                 │---xdp_redirect-->│                  │
│         xdp:pass└─┬──────────────┬─┘zon-lb     zon-lb└─┬──────────────┬─┘xdp:pass          │
│tx-checksumminf:off│              │                     │              │tx-checksumming:off │
└───────────────────┘              └─────────────────────┘              └────────────────────┘
#+end_src

** Zon-lb features:

- XDP redirect on veth
- Connection tracking
- FIB lookup
- ARP caching
- full NAT (src/dst L2/L3 addresses change)

** Setup

Run the [[./setup.sh][setup]] to create the custom namespace =zone0=:

#+begin_src sh
sudp ./setup.sh
#+end_src

Load the configuration [[./zonlb.toml][config]]:

#+begin_src sh
sudo ./zon-lb ./zonlb.toml load
#+end_src

Note that there no need to preload or postload the =zon-lb= program
on any of the interfaces mentioned in the config file. The user app
will automatically load or replace the existing program binded to
the interface. This is done in order to patch the redirect map that
might not be consistent with current device indexes.

*** Both veth pair sides must have attached an xdp program

Note that the setup script will install a simple xdp program on veth interfaces
inside the netns that just return =XDP_PASS=. This is done because =zon-lb= uses
=xdp redirect= functionality to move packets to another veth pair and this process
requires that both sides of this pair to have an xdp program attached. As can you
see from the above diagram the veth interface from the default netns has the =zon-lb=
program attached. On the other side it necessary to have the xdp program return
=XDP_PASS= and not other values in order for the veth driver to unpack the
=xdp_frame= created during =xdp_redirect= and get the ethernet frame.

To attach the xdp program in driver mode to an veth interface:
#+begin_src sh
ip link set veth3 xdp obj xdp_pass.o sec .text
#+end_src

To unload the xdp program just set it to =none=:
#+begin_src sh
ip link set veth3 xdp none
#+end_src

*** Must disable tx offload checksumming on both veth interfaces from netns
The script also disables the TCP checksumming offload because veth does not
support hw checksum compute although it advertises this support (=NETIF_F_HW_CSUM=)
in its exported features. To overcome this bug the script will disable this
feature. More details on how to issue was investigated see section [[Debugging ignored TCP SYN packet]].

** Run =telnet= test

The primary test to do when verifying a load balanaced TCP connection is
to use =telnet=.

From the default netns run the following command in order to launch
a =netcat= TCP server listening on port 223 inside the =zone2= netns:

#+begin_src sh
sudo ip netns exec zone2 nc -nlv -p 223 -s 10.2.0.2
#+end_src

If the server is started without errors it will print:

#+begin_src
listening on [10.2.0.2] 223 ...
#+end_src

Note that since the packets are redirected the source address will be
=10.2.0.1=, the IP address assigned by =zon-lb= when redirecting packets
to this backend. For kernels version less than 6.7 this address needs
to be provided by hand. Starting with kernel 6.7 this source address
will be obtained automatically after the FIB query. See
[[https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/uapi/linux/bpf.h?h=v6.7.12&#n3267][BPF_FIB_LOOKUP_SRC]]

From another terminal running in the default netns run the following
command in order to start the =telnet= client inside the =zone0= netns:

#+begin_src sh
sudo ip netns exec zone0 telnet 10.0.0.1
#+end_src

If the telnet client successfully connects to the nc server, the latter will print:
#+begin_src
connect to [10.2.0.2] from (UNKNOWN) [10.2.0.1] 37578
#+end_src
.. while the client will print:
#+begin_src
Connected to 10.0.0.1.
Escape character is '^]'.
#+end_src

Note that the client thinks it is connected to a server at address =10.0.0.1=
while the server thinks it is connected to a client binded at =10.2.0.1=.

The telnet client was also used to investigate the ignored TCP SYN packet below.

** Debugging ignored TCP SYN packet redirected to veth but received by pair veth driver

Notes:
- This problem prevents the 3-way TCP handshake as the SYN packet is ignored and no ACK+SYN packet is replyed back.
- The L4 UDP communication is also affected. For IPv4 the UDP the inet csum is optional so the packet drop happens during L4 handling.
- This isn't a network route problem as the ICMP reply works and the source IP is reachable from the netns. This also means that the packet reaches L3 and the IP inet check sum is computed correctly.
- The =ip -s a= command show that the veth pair received w/o errors the SYN packet but also shows that the endpoint doesn't respond back.
- The veth pair from network namespace had the required xdp program to enable the link with the action XDP_PASS. Any other actions would drop the packet.

*** Using the ethtool

The =ethtool -S veth<id>= will show the xdp statistics and they show that there are no L2
xmit or rx issues or regarding the received xdp frames.

#+begin_src
# sudo ethtool -S veth2
NIC statistics:
     peer_ifindex: 2
     rx_queue_0_xdp_packets: 450
     rx_queue_0_xdp_bytes: 28292
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 187
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 720
     tx_queue_0_xdp_xmit_errors: 0
     
# ethtool -S veth3
NIC statistics:
     peer_ifindex: 17
     rx_queue_0_xdp_packets: 1596
     rx_queue_0_xdp_bytes: 132827
     rx_queue_0_drops: 0
     rx_queue_0_xdp_redirect: 0
     rx_queue_0_xdp_drops: 0
     rx_queue_0_xdp_tx: 0
     rx_queue_0_xdp_tx_errors: 0
     tx_queue_0_xdp_xmit: 0
     tx_queue_0_xdp_xmit_errors: 0
#+end_src

*** Using bpftrace tcpdrop-bpfcc

The available tracepoints (kfree_skb, consume_skb) doesn't seem to catch TCP packets.
ICMP packets seem to be freed by consume_skb.

*** Using bpftrace custom script

**** Find the veth driver functions called during the redirect

#+begin_src
# bpftrace -e 'kprobe:veth_* { @cnt[probe]=count(); }'
Attaching 45 probes...
@cnt[kprobe:veth_xmit]: 3
@cnt[kprobe:veth_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_skb]: 3
@cnt[kprobe:veth_xdp_get]: 3
@cnt[kprobe:veth_xdp_rcv_bulk_skb.constprop.0]: 3
@cnt[kprobe:veth_ndo_xdp_xmit]: 3
@cnt[kprobe:veth_xdp_rcv_one]: 3
@cnt[kprobe:veth_xdp_rcv.constprop.0]: 6
@cnt[kprobe:veth_poll]: 8
@cnt[kprobe:veth_get_iflink]: 195
@cnt[kprobe:veth_get_link_net]: 195
@cnt[kprobe:veth_get_stats64]: 403
@cnt[kprobe:veth_stats_rx]: 744
#+end_src

**** Find where the TCP SYN packet gets dropped by tracing the relevant veth driver and network stack functions

Since the icmp works and tcp does not attach probe to =kfree_skb_reason= to catch when the packet is discarded.
We can use the bpftrace =kstack= function to print the kernel stack trace from the =kfree_skb_reason=:

#+begin_src
22:02:59 0 swapper/3 veth3 kprobe:kfree_skb_reason  reason: 4 ..
        kfree_skb_reason+1
        tcp_v4_rcv+129
        ip_protocol_deliver_rcu+50
        ip_local_deliver_finish+114
        ip_sublist_rcv_finish+126
        ip_sublist_rcv+402
        ip_list_rcv+313
        __netif_receive_skb_list_core+670
        netif_receive_skb_list_internal+461
        napi_complete_done+109
        veth_poll+218
        __napi_poll+43
        net_rx_action+670
        __softirqentry_text_start+198
        __irq_exit_rcu+170
        sysvec_apic_timer_interrupt+110
        asm_sysvec_apic_timer_interrupt+22
        cpuidle_enter_state+222
        cpuidle_enter+41
        do_idle+514
        cpu_startup_entry+38
        start_secondary+298
        secondary_startup_64_no_verify+229
#+end_src

The reason id =4= means the tcp checksum is wrong according to the enum value
[[https://elixir.bootlin.com/linux/v6.1/source/include/net/dropreason.h#L90][SKB_DROP_REASON_TCP_CSUM]]:

#+begin_src
/** @SKB_DROP_REASON_TCP_CSUM: TCP checksum error */
	SKB_DROP_REASON_TCP_CSUM,
#+end_src

The full packet trace within the network stack is this:
#+begin_src
TIME     PID      COMMAND      VETH  PROBE                                    SKB_ADDR               SOURCE            DEST          DETAILS
17:55:40 3482215  telnet       veth1 kprobe:veth_xmit                         skb:0xffff940bcd4846e8 10.0.0.2:46846 -> 10.0.0.1:23    SYN_SENT
17:55:40 3482215  telnet       veth0 kprobe:veth_poll
17:55:40 3482215  telnet       veth0 kprobe:veth_xdp_rcv_skb                  skb:0xffff940bcd4846e8 10.0.0.2:46846 -> 10.0.0.1:23    SYN_SENT
17:55:40 3482215  telnet       veth2 kprobe:veth_xdp_xmit                     frm:0xffff940bede5a100, n=1, peer=veth3
17:55:40 3482215  telnet       veth0 kprobe:napi_complete_done
17:55:40 3482215  telnet       veth3 kprobe:veth_poll
17:55:40 3482215  telnet       veth3 kprobe:veth_xdp_rcv_one                  frm:0xffff940bede5a100
17:55:40 3482215  telnet       veth3 kprobe:__xdp_build_skb_from_frame        frm:0xffff940bede5a100 -> skb:0xffff940c92429500
17:55:40 3482215  telnet       veth3 kretprobe:__xdp_build_skb_from_frame     skb:0xffff940c92429500 10.2.0.1 -> 10.2.0.2 ethertype: 0x800, next: 6
17:55:40 3482215  telnet       veth3 tracepoint:net:napi_gro_receive_entry    skb:0xffff940c92429500 10.2.0.1 -> 10.2.0.2 ethertype: 0x800, next: 6
17:55:40 3482215  telnet       veth3 kprobe:napi_complete_done
17:55:40 3482215  telnet       veth3 kprobe:ip_protocol_deliver_rcu           skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223   protocol: 6
17:55:40 3482215  telnet       veth3 kprobe:tcp_v4_rcv                        skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223
17:55:40 3482215  telnet       veth3 tracepoint:tcp:tcp_bad_csum              skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223
17:55:40 3482215  telnet       veth3 kprobe:kfree_skb_reason                  skb:0xffff940c92429500 10.2.0.1:46846 -> 10.2.0.2:223   drop_reason: 4
#+end_src

Note, that this packet is passed to the network stack as the =napi_complete_done= is called.
Also, since the xdp program uses =redirect= the packet will be encapsulated into an xdp frame
when it is transmitted from veth2 to veth3, hence the =veth_xdp_xmit= call. The frame address
is prefixed by =frm:=. The conversion back to skb happens in function =__xdp_build_skb_from_frame=
just before the driver passes the packet to the network stack.

**** Finding root cause by investigating the kernel call stack on =xmit=

To print the call stack one must use the same =kstack= function mentioned
above but in the kprobe attached to =veth_xmit=. On Linux kernel 6.1 the
stack look like:

#+begin_src
        veth_xmit+1
        dev_hard_start_xmit+99
        __dev_queue_xmit+618
        ip_finish_output2+364
        __ip_queue_xmit+369
        __tcp_transmit_skb+2724
        tcp_connect+2858
        tcp_v4_connect+1042
        __inet_stream_connect+218
        inet_stream_connect+54
        __sys_connect+164
        __x64_sys_connect+20
        do_syscall_64+91
        entry_SYSCALL_64_after_hwframe+100
#+end_src

Note that this is the first attempt to transmit the packet and since this is
the TCP SYN packet there can be packet retransmissions that are done using
a different stack (actually from the network tx softirq thread).

Investigating the source code for the called functions some problem details
look more clearer.

Looking at the veth kernel sources the problem looks evident: the driver
falsely advertises in it's features that it supports HW checksum offload
(=NETIF_F_HW_CSUM=).
#+begin_src C
#define VETH_FEATURES (NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_HW_CSUM | \
		       NETIF_F_RXCSUM | NETIF_F_SCTP_CRC | NETIF_F_HIGHDMA | \
		       NETIF_F_GSO_SOFTWARE | NETIF_F_GSO_ENCAP_ALL | \
		       NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX | \
		       NETIF_F_HW_VLAN_STAG_TX | NETIF_F_HW_VLAN_STAG_RX )
#+end_src
See [[https://elixir.bootlin.com/linux/v6.1/source/drivers/net/veth.c#L1619][kernel 6.1 net/drivers/veth.c]].

The network stack does not attempt to build the transport layer checksum
as the driver is required to compute it, according to the comments from =skbuff.h= at section
[[https://elixir.bootlin.com/linux/v6.1/source/include/linux/skbuff.h#L165][Checksumming on transmit for non-GSO]]:
#+BEGIN_SRC C
 * The stack requests checksum offload in the &sk_buff.ip_summed for a packet.
 * Values are:
 *
 * - %CHECKSUM_PARTIAL
 *
 *   The driver is required to checksum the packet as seen by hard_start_xmit()
 *   from &sk_buff.csum_start up to the end, and to record/write the checksum at
 *   offset &sk_buff.csum_start + &sk_buff.csum_offset.
#+END_SRC

Looking inside the function
[[https://elixir.bootlin.com/linux/v6.1/source/net/core/dev.c#L3687][validate_xmit_skb]]
called from =__dev_queue_xmit= in case of software devices with no queues like veth,
we see there is a test if =ip_summed= is =CHECKSUM_PARTIAL= and if the device supports
checksum offloading (=NETIF_F_HW_CSUM= feature):
#+begin_src C
/* If packet is not checksummed and device does not
* support checksumming for this protocol, complete
* checksumming here.
*/
if (skb->ip_summed == CHECKSUM_PARTIAL) {
...
if (skb_csum_hwoffload_help(skb, features))
#+end_src

The device features can be viewed and modified using the ethtool. For =NETIF_F_HW_CSUM=
feature the mapped ethtool setting is =tx-checksumming=. According to the veth sources
this setting is =on= by default:

#+begin_src
# ethtool -k veth1 | grep tx-checksumming
tx-checksumming: on
#+end_src

The next question is where exactly in the xmit call stack this flag is used to decide
if the to checksum needs to be built. To answer to this question we must either trace
the fields =ip_summed= and =csum= values from skbuff creation to transmission.
This can be tedious but the
[[https://elixir.bootlin.com/linux/v6.1/source/include/linux/skbuff.h#L188][Checksumming on transmit for non-GSO]]
offers a clue. The decision to compute the checksum is taken in the =skb_csum_hwoffload_help= based on the
net device feature =NETIF_F_HW_CSUM=:

#+BEGIN_SRC
 *   %NETIF_F_IP_CSUM and %NETIF_F_IPV6_CSUM are being deprecated in favor of
 *   %NETIF_F_HW_CSUM. New devices should use %NETIF_F_HW_CSUM to indicate
 *   checksum offload capability.
 *   skb_csum_hwoffload_help() can be called to resolve %CHECKSUM_PARTIAL based
 *   on network device checksumming capabilities: if a packet does not match
 *   them, skb_checksum_help() or skb_crc32c_help() (depending on the value of
 *   &sk_buff.csum_not_inet, see :ref:`crc`)
 *   is called to resolve the checksum.
#+END_SRC

Using the above information and adding kprobes to relevant function the call trace
show that on =tx-checksumming on= the checksum is not computed:
#+begin_src
21:24:06 3627436  telnet       veth1 kprobe:ip_finish_output2                 skb:0xffff940bc65530e8 CSUM_PARTIAL cs:18011000
21:24:06 3627436  telnet       veth1 kprobe:__dev_queue_xmit                  skb:0xffff940bc65530e8 CSUM_PARTIAL cs:18011000
21:24:06 3627436  telnet       veth1 kprobe:validate_xmit_skb                 skb:0xffff940bc65530e8 CSUM_PARTIAL NETIF_F_HW_CSUM
21:24:06 3627436  telnet       veth1 kretprobe:validate_xmit_skb              skb:0xffff940bc65530e8 CSUM_PARTIAL NETIF_F_HW_CSUM
21:24:06 3627436  telnet       veth1 kprobe:dev_hard_start_xmit               skb:0xffff940bc65530e8 CSUM_PARTIAL cs:18011000
21:24:06 3627436  telnet       veth1 kprobe:veth_xmit                         skb:0xffff940bc65530e8 10.0.0.2:37266 -> 10.0.0.1:23    SYN_SENT CSUM_PARTIAL NETIF_F_HW_CSUM
#+end_src

But, when =tx-checksumming off= the network stack will indeed compute the checksum:
#+begin_src
21:26:26 3628038  telnet       veth1 kprobe:ip_finish_output2                 skb:0xffff940b318d3ee8 CSUM_PARTIAL cs:18011000
21:26:26 3628038  telnet       veth1 kprobe:__dev_queue_xmit                  skb:0xffff940b318d3ee8 CSUM_PARTIAL cs:18011000
21:26:26 3628038  telnet       veth1 kprobe:validate_xmit_skb                 skb:0xffff940b318d3ee8 CSUM_PARTIAL
21:26:26 3628038  telnet       veth1 kprobe:skb_checksum_help                 skb:0xffff940b318d3ee8 CSUM_PARTIAL
21:26:26 3628038  telnet       veth1 kprobe:skb_checksum                      skb:0xffff940b318d3ee8 CSUM_PARTIAL
21:26:26 3628038  telnet       veth1 kretprobe:validate_xmit_skb              skb:0xffff940b318d3ee8 CSUM_NONE
21:26:26 3628038  telnet       veth1 kprobe:dev_hard_start_xmit               skb:0xffff940b318d3ee8 CSUM_NONE cs:18011000
21:26:26 3628038  telnet       veth1 kprobe:veth_xmit                         skb:0xffff940b318d3ee8 10.0.0.2:37578 -> 10.0.0.1:23    SYN_SENT CSUM_NONE
#+end_src

Note, that indeed the decision to compute is done in =validate_xmit_skb= and also
the =ip_summed= is changed from =CHECKSUM_PARTIAL= to =CHECKSUM_NONE= which means
(looking at the same skbuff header comment):
#+BEGIN_SRC
 * - %CHECKSUM_NONE
 *
 *   The skb was already checksummed by the protocol, or a checksum is not
 *   required.
#+END_SRC

As a final note, the kprobes target only the functions between =__ip_queue_xmit= and =veth_xmit=
in order to filter only those packets that use veth net devices. The skbuff may be created
in =tcp_connect= but at that time there is no net device attached to the skbuff.
This information is later added between =__ip_queue_xmit= and =ip_finish_output2= for veth devices.

To finally fix the issue just turn off the =tx-checksumming= with =ethtool=:
#+begin_src sh
# ethtool -K veth1 tx-checksumming off
#+end_src

** References

- [[https://github.com/bpftrace/bpftrace/blob/master/man/adoc/bpftrace.adoc][Bpftrace manual]]
- [[https://github.com/bpftrace/bpftrace/tree/master/tools][Bpftrace tools]]
- [[https://docs.kernel.org/networking/skbuff.html#checksumming-on-transmit-for-non-gso][Kernel doc: Checksumming on transmit for non-GSO]]

