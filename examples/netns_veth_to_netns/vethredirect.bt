#!/usr/bin/env bpftrace
/*
 * veth redirect - shows veth received packets
 *
 * Adapted for veth after bpftrace tcpdrop.bt.
 */

#ifndef BPFTRACE_HAVE_BTF
#include <linux/socket.h>
#include <net/sock.h>
#else
#include <sys/socket.h>
#endif
#include <linux/ip.h>
#include <linux/ipv6.h>
#include <linux/in.h>
#include <net/tcp.h>
#include <net/udp.h>
#include <net/xdp.h>

BEGIN
{
  printf("Tracing veth packets. Ctrl-C to end.\n");

  @tcp_states[1] = "ESTABLISHED";
  @tcp_states[2] = "SYN_SENT";
  @tcp_states[3] = "SYN_RECV";
  @tcp_states[4] = "FIN_WAIT1";
  @tcp_states[5] = "FIN_WAIT2";
  @tcp_states[6] = "TIME_WAIT";
  @tcp_states[7] = "CLOSE";
  @tcp_states[8] = "CLOSE_WAIT";
  @tcp_states[9] = "LAST_ACK";
  @tcp_states[10] = "LISTEN";
  @tcp_states[11] = "CLOSING";
  @tcp_states[12] = "NEW_SYN_RECV";

  @checksum[0] = "CSUM_NONE";
  @checksum[1] = "CSUM_UNNECESSARY";
  @checksum[2] = "CSUM_COMPLETE";
  @checksum[3] = "CSUM_PARTIAL";
}

tracepoint:tcp:tcp_bad_csum
{
  $skb = (struct sk_buff *)args->skbaddr;
  $sk = ((struct sock *) $skb->sk);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  $inet_family = ((struct sockaddr_in *)args->saddr)->sin_family;

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ($inet_family != AF_INET && $inet_family != AF_INET6) {
    printf("%-24s unknown inet_family: %d \n", probe, $inet_family);
    return;
  }

 if ($inet_family == AF_INET) {
      $inet = (struct sockaddr_in *)args->daddr;
      $daddr = ntop($inet->sin_addr.s_addr);
      $dport = bswap($inet->sin_port);

      $inet = (struct sockaddr_in *)args->saddr;
      $saddr = ntop($inet->sin_addr.s_addr);
      $sport = bswap($inet->sin_port);
  } else {
      $inet6 = (struct sockaddr_in6 *)args->daddr;
      $daddr = ntop($inet6->sin6_addr.in6_u.u6_addr8);
      $dport = bswap($inet6->sin6_port);

      $inet6 = (struct sockaddr_in6 *)args->saddr;
      $saddr = ntop($inet6->sin6_addr.in6_u.u6_addr8);
      $sport = bswap($inet6->sin6_port);
  }

  printf("%s:%-5d -> %s:%-5d\n", $saddr, $sport, $daddr, $dport);
  //printf("%s\n", kstack);
}

kprobe:tcp_v4_rcv
{
  $skb = (struct sk_buff *)arg0;
  $ethertype = bswap($skb->protocol);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ( $ethertype != ETH_P_IP && $ethertype != ETH_P_IPV6 ) {
    printf("unknown ethertype: %p \n", $ethertype);
    return;
  }

  if ($ethertype == ETH_P_IP) {
    $iphdr4 = (struct iphdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr4->daddr);
    $saddr  = ntop($iphdr4->saddr);
    $proto  = $iphdr4->protocol;
  } else {
    $iphdr6 = (struct ipv6hdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr6->daddr.in6_u.u6_addr8);
    $saddr  = ntop($iphdr6->saddr.in6_u.u6_addr8);
    $proto  = $iphdr6->nexthdr;
  }

  if ( $proto == IPPROTO_TCP ) {
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($tcphdr->source);
    $dport  = bswap($tcphdr->dest);
  } else if ( $proto == IPPROTO_UDP ) {
    $udphdr = (struct udphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($udphdr->source);
    $dport  = bswap($udphdr->dest);
  } else {
    $sport = 0;
    $dport = 0;
  }

  printf("%s:%-5d -> %s:%-5d\n", $saddr, $sport, $daddr, $dport);
 // printf("%s\n", kstack);
}

kprobe:kfree_skb_reason
{
  $skb = (struct sk_buff *)arg0;
  $ethertype = bswap($skb->protocol);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ( $ethertype != ETH_P_IP && $ethertype != ETH_P_IPV6 ) {
    printf("unknown ethertype: %p \n", $ethertype);
    return;
  }

  if ($ethertype == ETH_P_IP) {
    $iphdr4 = (struct iphdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr4->daddr);
    $saddr  = ntop($iphdr4->saddr);
    $proto  = $iphdr4->protocol;
  } else {
    $iphdr6 = (struct ipv6hdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr6->daddr.in6_u.u6_addr8);
    $saddr  = ntop($iphdr6->saddr.in6_u.u6_addr8);
    $proto  = $iphdr6->nexthdr;
  }

  if ( $proto == IPPROTO_TCP ) {
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($tcphdr->source);
    $dport  = bswap($tcphdr->dest);
  } else if ( $proto == IPPROTO_UDP ) {
    $udphdr = (struct udphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($udphdr->source);
    $dport  = bswap($udphdr->dest);
  } else {
    $sport = 0;
    $dport = 0;
  }

  printf("%s:%-5d -> %s:%-5d ", $saddr, $sport, $daddr, $dport);
  printf("drop_reason: %d\n", arg1);

 // printf("%s\n", kstack);
}

// Note: the net namespace is retrieved from the
// skb->dev->nd_net; see ip_local_deliver

kprobe:ip_protocol_deliver_rcu
{
  $skb = (struct sk_buff *)arg1;
  $ethertype = bswap($skb->protocol);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ( $ethertype != ETH_P_IP && $ethertype != ETH_P_IPV6 ) {
    printf("unknown ethertype: %p\n", $ethertype);
    return;
  }

  if ($ethertype == ETH_P_IP) {
    $iphdr4 = (struct iphdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr4->daddr);
    $saddr  = ntop($iphdr4->saddr);
    $proto  = $iphdr4->protocol;
  } else {
    $iphdr6 = (struct ipv6hdr *)($skb->head + $skb->network_header);
    $daddr  = ntop($iphdr6->daddr.in6_u.u6_addr8);
    $saddr  = ntop($iphdr6->saddr.in6_u.u6_addr8);
    $proto  = $iphdr6->nexthdr;
  }

  if ( $proto == IPPROTO_TCP ) {
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($tcphdr->source);
    $dport  = bswap($tcphdr->dest);
  } else if ( $proto == IPPROTO_UDP ) {
    $udphdr = (struct udphdr *)($skb->head + $skb->transport_header);
    $sport  = bswap($udphdr->source);
    $dport  = bswap($udphdr->dest);
  } else {
    $sport = 0;
    $dport = 0;
  }

  printf("%s:%-5d -> %s:%-5d ", $saddr, $sport, $daddr, $dport);
  printf("protocol: %d\n", arg2);

 // printf("%s\n", kstack);
}

kprobe:napi_complete_done,
kprobe:veth_poll
{
  $napi = (struct napi_struct *)arg0;
  $ifname = $napi->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-24s\n", pid, comm, $ifname, probe);
  //printf("%s\n", kstack);
}

tracepoint:net:napi_gro_receive_entry
{
  $skb = (struct sk_buff *)args->skbaddr;
  $ethertype = bswap($skb->protocol);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ( $ethertype != ETH_P_IP && $ethertype != ETH_P_IPV6 ) {
    printf("unknown ethertype: %p\n", $ethertype);
    return;
  }

  if ($ethertype == ETH_P_IP) {
    $iphdr4 = (struct iphdr *)($skb->data);
    $daddr  = ntop($iphdr4->daddr);
    $saddr  = ntop($iphdr4->saddr);
    $proto  = $iphdr4->protocol;
  } else {
    $iphdr6 = (struct ipv6hdr *)($skb->data);
    $daddr  = ntop($iphdr6->daddr.in6_u.u6_addr8);
    $saddr  = ntop($iphdr6->saddr.in6_u.u6_addr8);
    $proto  = $iphdr6->nexthdr;
  }

  printf("%s -> %s ", $saddr, $daddr);
  printf("ethertype: %p, next: %d \n", args->protocol, $proto);
}

kprobe:__xdp_build_skb_from_frame
{
  $frame = (struct xdp_frame *)arg0;
  $skb = (struct sk_buff *)arg1;
  $ndev = (struct net_device *)arg2;
  $ifname = $ndev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("frm:%p -> skb:%p\n", $frame->data, $skb);
}

kretprobe:__xdp_build_skb_from_frame
{
  $skb = (struct sk_buff *)retval;
  $ethertype = bswap($skb->protocol);
  $ifname = $skb->dev->name;

  if (strncmp($ifname, "veth", 4)) {
    return;
  }

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("skb:%p ", $skb);

  if ( $ethertype != ETH_P_IP && $ethertype != ETH_P_IPV6 ) {
    printf("unknown ethertype: %p\n", $ethertype);
    return;
  }

  if ($ethertype == ETH_P_IP) {
    $iphdr4 = (struct iphdr *)($skb->data);
    $daddr  = ntop($iphdr4->daddr);
    $saddr  = ntop($iphdr4->saddr);
    $proto  = $iphdr4->protocol;
  } else {
    $iphdr6 = (struct ipv6hdr *)($skb->data);
    $daddr  = ntop($iphdr6->daddr.in6_u.u6_addr8);
    $saddr  = ntop($iphdr6->saddr.in6_u.u6_addr8);
    $proto  = $iphdr6->nexthdr;
  }

  printf("%s -> %s ", $saddr, $daddr);
  printf("ethertype: %p, next: %d \n", bswap($skb->protocol), $proto);
}

kprobe:xdp_return_frame,
{
  // TODO: print first frame ptr

  time("%H:%M:%S ");
  printf("%-8d %-12s %-24s\n", pid, comm, probe);
  printf("%s\n", kstack);
}

//kprobe:veth_xdp_rcv.constprop.0,
//kprobe:veth_xdp_rcv_bulk_skb.constprop.0,
kprobe:veth_xdp_rcv_one
{
  $rq = (struct veth_rq *)arg0;
  $ifname = $rq->dev->name;
  $frame = (struct xdp_frame *)arg1;

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);
  printf("frm:%p\n", $frame->data);

  //printf("%s\n", kstack);
}

kprobe:veth_xdp_xmit
{
  $ndev = (struct net_device *)arg0;
  $ifname = $ndev->name;
  $ndotx = (uint8)arg4;

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s ", pid, comm, $ifname, probe);

  if (arg1 > 0) {
    $frames = (struct xdp_frame **)arg2;
    $frame = $frames[0];
    $priv = (int64)($ndev + 1);
    $rxndev = *((struct net_device **)$priv);
    printf("frm:%p, n=%d", $frame->data, arg1);
    if ($rxndev != 0) {
      printf(", peer=%s", $rxndev->name);
    } else {
     // ptr is null or name is empty try align $priv pointer to 32
    }
  } else {
    printf("no frames");
  }
  printf("\n");
  //printf("%s\n", kstack);
}

kprobe:veth_xmit
{
  $skb = (struct sk_buff *)arg0;
  $sk = ((struct sock *) $skb->sk);
  $inet_family = $sk->__sk_common.skc_family;

  $ndev = (struct net_device *)arg1;
  $ifname = $ndev->name;

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s skb:%p ", pid, comm, $ifname, probe, $skb);

  if ($inet_family != AF_INET && $inet_family != AF_INET6) {
     printf(" invalid inet_family: %d\n", $inet_family);
     return;
  }

  if ($inet_family == AF_INET) {
    $daddr = ntop($sk->__sk_common.skc_daddr);
    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
  } else {
    $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
    $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
  }

  $lport = $sk->__sk_common.skc_num;
  $dport = $sk->__sk_common.skc_dport;

  // Destination port is big endian, it must be flipped
  $dport = bswap($dport);

  $state = $sk->__sk_common.skc_state;
  $statestr = @tcp_states[$state];

  printf("%s:%-5d -> %s:%-5d %s ", $saddr, $lport, $daddr, $dport, $statestr);
  printf("%s ", @checksum[$skb->ip_summed]);

  if ($ndev->features & (1 << 3)) {
    printf("NETIF_F_HW_CSUM ");
  }

  printf("\n");

  // printf("%s\n", kstack);
}

kprobe:veth_xdp_rcv_skb
{
  $rq = (struct veth_rq *)arg0;
  $ifname = $rq->dev->name;

  $skb = (struct sk_buff *)arg1;
  $sk = ((struct sock *) $skb->sk);
  $inet_family = $sk->__sk_common.skc_family;

  time("%H:%M:%S ");
  printf("%-8d %-12s %s %-40s skb:%p ", pid, comm, $ifname, probe, $skb);

  if ($inet_family != AF_INET && $inet_family != AF_INET6) {
     printf(" invalid inet_family: %d\n", $inet_family);
     return;
  }

  if ($inet_family == AF_INET) {
    $daddr = ntop($sk->__sk_common.skc_daddr);
    $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
  } else {
    $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
    $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
  }

  $lport = $sk->__sk_common.skc_num;
  $dport = $sk->__sk_common.skc_dport;

  // Destination port is big endian, it must be flipped
  $dport = bswap($dport);

  $state = $sk->__sk_common.skc_state;
  $statestr = @tcp_states[$state];

  printf("%s:%-5d -> %s:%-5d %s\n", $saddr, $lport, $daddr, $dport, $statestr);
  //printf("%s\n", kstack);
}

END
{
  clear(@tcp_states);
  clear(@checksum);
}
