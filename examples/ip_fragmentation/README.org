#+TITLE: Test zon-lb against IP fragmentation

#+begin_src
┌───────────────────┐              ┌──────────────────────┐              ┌────────────────────┐
│zone1 netns        │              │    default netns     │              │         zone0 netns│
│  server           │              │                      │              │            client  │
│                 ┌─┴──────────────┴─┐                  ┌─┴──────────────┴─┐                  │
│            veth3│<--xdp_redirect---│veth2        veth0│<-----------------│veth1             │
│         mtu:1310│----------------->│mtu:1310  mtu:1500│---xdp_redirect-->│mtu:1500          │
│         xdp:pass└─┬──────────────┬─┘zon-lb      zon-lb└─┬──────────────┬─┘xdp:pass          │
│tx-checksumminf:off│              │                      │              │tx-checksumming:off │
└───────────────────┘              └──────────────────────┘              └────────────────────┘
#+end_src

Some IP protocols like ICMP or UDP don't have the concept of data segment or
Max Segment Size (MSS) like TCP that prevent IP fragmentation. In case of such
protocols a load balancer must be able to forward packets that represent IP
fragments without the L4 port or sequence id and only using the information
available at the IP header.

In order for the IP protocol to split the payload into fragments it needs the
Maximum Transmission Unit (MTU) of local interface and the smallest MTU along
the path to the destination endpoint. The first is easy to obtain but the last one
depends if the routers and load balancers along the path are configured to send
Packet Too Big (PTB) IMCP message with the actual MTU. Some applications can employ
a [[Datagram Packetization Layer Path MTU Discovery][https://datatracker.ietf.org/doc/html/rfc8899]]
but this is not always available. Instead the PMUTD should be supported by any modern OS
as it is based on PTB ICMP messages.

For a better integration in the Linux environment the current load balancer
implements both of the above solutions for handling fragments.

** Zon-lb features:

- XDP redirect on veth
- Connection tracking
- FIB lookup
- Full NAT (src/dst L2/L3 addresses change)
- IPv6 fragmentation: track fragments by src+dest+flow-id
- IPv4 fragmentation: track fragments for protocols w/o segmentation, e.g. ICMPv4
- IPv6 Path MTU Discovery (PMUTD): send ICMPv6 Packet Too Big message
- IPv4 PMUTD: send ICMPv4 Datagram Too Big message

** Setup

Run the [[./setup.sh][setup]] to create the custom namespace =zone0=:

#+begin_src sh
sudp ./setup.sh
#+end_src

Load the configuration [[./zonlb.toml][config]]:

#+begin_src sh
sudo ./zon-lb ./zonlb.toml load
#+end_src

Note that there no need to preload or postload the =zon-lb= program
on any of the interfaces mentioned in the config file. The user app
will automatically load or replace the existing program binded to
the interface. This is done in order to patch the redirect map that
might not be consistent with current device indexes.

*** Both veth pair sides must have attached an xdp program

Note that the setup script will install a simple xdp program on veth interfaces
inside the netns that just return =XDP_PASS=. This is done because =zon-lb= uses
=xdp redirect= functionality to move packets to another veth pair and this process
requires that both sides of this pair to have an xdp program attached. As can you
see from the above diagram the veth interface from the default netns has the =zon-lb=
program attached. On the other side it necessary to have the xdp program return
=XDP_PASS= and not other values in order for the veth driver to unpack the
=xdp_frame= created during =xdp_redirect= and get the ethernet frame.

To attach the xdp program in driver mode to an veth interface:
#+begin_src sh
ip link set veth3 xdp obj xdp_pass.o sec .text
#+end_src

To unload the xdp program just set it to =none=:
#+begin_src sh
ip link set veth3 xdp none
#+end_src

*** Must disable tx offload checksumming on both veth interfaces from netns
The script also disables the TCP checksumming offload because veth does not
support hw checksum compute although it advertises this support (=NETIF_F_HW_CSUM=)
in its exported features. To overcome this bug the script will disable this
feature. More details on how the issue was investigated see section
[[../netns_veth_to_netns/README.org#debugging-ignored-tcp-syn-packet-redirected-to-veth-but-received-by-pair-veth-driver][Debugging ignored TCP SYN packet]].

*** Use =2001:DB8::/32= to avoid clash with actual IPv6 Global Unique Addresses
#+begin_quote
To reduce the likelihood of conflict and confusion when relating
documented examples to deployed systems, an IPv6 unicast address
prefix is reserved for use in examples in RFCs, books, documentation,
and the like.  Since site-local and link-local unicast addresses have
special meaning in IPv6, these addresses cannot be used in many
example situations.  The document describes the use of the IPv6
address prefix 2001:DB8::/32 as a reserved prefix for use in
documentation.
#+end_quote
For details see [[https://datatracker.ietf.org/doc/html/rfc3849][rfc3849]].

*** Choosing the MTU for the redirect interface
The current test uses a MTU bigger than 1280 which is the minimum MTU
supported by IPv6 - see [[https://datatracker.ietf.org/doc/html/rfc8200#section-5][Packet Size Issues]].
In fact, on Linux, when setting an MTU smaller than 1280, the system will automatically
remove any IPv6 address set on that interface.

** References

- [[https://labs.ripe.net/author/gih/evaluating-ipv4-and-ipv6-packet-fragmentation/][Evaluating IPv4 and IPv6 Packet Fragmentation]]
- [[https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt][ip sysctl - Path MTU discovery settings]]
- [[https://packetpushers.net/blog/ip-fragmentation-in-detail/][IP Fragmentation in Detail]]
- [[https://lwn.net/Articles/960913/][So you think you understand IP fragmentation?]]
- [[https://datatracker.ietf.org/doc/html/rfc6436][Rationale for Update to the IPv6 Flow Label Specification]]
- [[http://linux-ip.net/html/tools-ip-route.html][ip route manual]]
- [[Datagram Packetization Layer Path MTU Discovery][https://datatracker.ietf.org/doc/html/rfc8899]]

